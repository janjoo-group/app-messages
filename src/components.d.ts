/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface JgroupAppMessage {
        /**
          * The heading of the message.
         */
        "heading": string;
        /**
          * The message to display.
         */
        "message": string;
        /**
          * The theme of the message.
         */
        "theme": 'light' | 'dark';
        /**
          * The type of message to display.
         */
        "type": 'warning' | 'error' | 'info' | 'success';
    }
    interface JgroupAppMessages {
        /**
          * The API URL to fetch messages from.
         */
        "apiUrl": string;
        /**
          * The app key to fetch messages for.
         */
        "appKey": string;
        /**
          * The section key to fetch messages for.
         */
        "appSectionKey": string;
        /**
          * The theme of the messages.
         */
        "theme": 'light' | 'dark';
        /**
          * The user identifier to fetch messages for.
         */
        "userIdentifier": string;
    }
}
export interface JgroupAppMessageCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLJgroupAppMessageElement;
}
declare global {
    interface HTMLJgroupAppMessageElementEventMap {
        "dismiss": number;
    }
    interface HTMLJgroupAppMessageElement extends Components.JgroupAppMessage, HTMLStencilElement {
        addEventListener<K extends keyof HTMLJgroupAppMessageElementEventMap>(type: K, listener: (this: HTMLJgroupAppMessageElement, ev: JgroupAppMessageCustomEvent<HTMLJgroupAppMessageElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLJgroupAppMessageElementEventMap>(type: K, listener: (this: HTMLJgroupAppMessageElement, ev: JgroupAppMessageCustomEvent<HTMLJgroupAppMessageElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLJgroupAppMessageElement: {
        prototype: HTMLJgroupAppMessageElement;
        new (): HTMLJgroupAppMessageElement;
    };
    interface HTMLJgroupAppMessagesElement extends Components.JgroupAppMessages, HTMLStencilElement {
    }
    var HTMLJgroupAppMessagesElement: {
        prototype: HTMLJgroupAppMessagesElement;
        new (): HTMLJgroupAppMessagesElement;
    };
    interface HTMLElementTagNameMap {
        "jgroup-app-message": HTMLJgroupAppMessageElement;
        "jgroup-app-messages": HTMLJgroupAppMessagesElement;
    }
}
declare namespace LocalJSX {
    interface JgroupAppMessage {
        /**
          * The heading of the message.
         */
        "heading"?: string;
        /**
          * The message to display.
         */
        "message"?: string;
        /**
          * Event emitted when the message is dismissed.
         */
        "onDismiss"?: (event: JgroupAppMessageCustomEvent<number>) => void;
        /**
          * The theme of the message.
         */
        "theme"?: 'light' | 'dark';
        /**
          * The type of message to display.
         */
        "type"?: 'warning' | 'error' | 'info' | 'success';
    }
    interface JgroupAppMessages {
        /**
          * The API URL to fetch messages from.
         */
        "apiUrl"?: string;
        /**
          * The app key to fetch messages for.
         */
        "appKey"?: string;
        /**
          * The section key to fetch messages for.
         */
        "appSectionKey"?: string;
        /**
          * The theme of the messages.
         */
        "theme"?: 'light' | 'dark';
        /**
          * The user identifier to fetch messages for.
         */
        "userIdentifier"?: string;
    }
    interface IntrinsicElements {
        "jgroup-app-message": JgroupAppMessage;
        "jgroup-app-messages": JgroupAppMessages;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "jgroup-app-message": LocalJSX.JgroupAppMessage & JSXBase.HTMLAttributes<HTMLJgroupAppMessageElement>;
            "jgroup-app-messages": LocalJSX.JgroupAppMessages & JSXBase.HTMLAttributes<HTMLJgroupAppMessagesElement>;
        }
    }
}
