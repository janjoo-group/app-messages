{"version":3,"file":"jgroup-app-messages.js","sourceRoot":"","sources":["../../../src/components/jgroup-app-messages/jgroup-app-messages.tsx"],"names":[],"mappings":"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","sourcesContent":["import FingerprintJS from '@fingerprintjs/fingerprintjs';\nimport { Component, h, Prop, State } from '@stencil/core';\n\n@Component({\n  tag: 'jgroup-app-messages',\n  styleUrl: 'jgroup-app-messages.css',\n  shadow: true,\n})\nexport class JgroupAppMessages {\n  /**\n   * The app key to fetch messages for.\n   */\n  @Prop() appKey: string;\n\n  /**\n   * The section key to fetch messages for.\n   */\n  @Prop() appSectionKey: string;\n\n  /**\n   * The user identifier to fetch messages for.\n   */\n  @Prop() userIdentifier: string;\n\n  /**\n   * The API URL to fetch messages from.\n   *\n   * @internal\n   */\n  @Prop() apiUrl: string = 'https://stats.jgroup.se/api';\n\n  /**\n   * The theme of the messages.\n   */\n  @Prop() theme: 'light' | 'dark' = 'light';\n\n  @State() messages = [];\n\n  private async getUserIdentifier(): Promise<string> {\n    return this.userIdentifier || (await this.getUserFingerprint());\n  }\n\n  private async getUserFingerprint(): Promise<string> {\n    const fpPromise = FingerprintJS.load();\n    const fp = await fpPromise;\n\n    return (await fp.get()).visitorId;\n  }\n\n  private async fetchMessages() {\n    const params = new URLSearchParams();\n    params.append('user_identifier', await this.getUserIdentifier());\n\n    const url = new URL(`${this.apiUrl}/app-messages/${this.appKey}/${this.appSectionKey}`);\n    url.search = params.toString();\n\n    const response = await fetch(url.toString());\n\n    if (!response.ok) {\n      console.error('Failed to fetch messages:', response.statusText);\n      return;\n    }\n\n    const data = await response.json();\n\n    this.messages = data.messages;\n  }\n\n  private async onDismiss(messageId: number) {\n    // optimistically remove the message from state\n    this.messages = this.messages.filter(message => message.id !== messageId);\n\n    const params = new URLSearchParams();\n    params.append('user_identifier', await this.getUserIdentifier());\n\n    const url = new URL(`${this.apiUrl}/app-messages/${this.appKey}/${this.appSectionKey}/${messageId}`);\n    url.search = params.toString();\n\n    const response = await fetch(url.toString(), {\n      method: 'DELETE',\n    });\n\n    if (!response.ok) {\n      console.error('Failed to dismiss message:', response.statusText);\n      return;\n    }\n  }\n\n  componentWillLoad() {\n    this.fetchMessages();\n  }\n\n  render() {\n    return (\n      <div class=\"grid grid-cols-1 gap-4\">\n        {this.messages.map(message => (\n          <jgroup-app-message\n            heading={message.title}\n            message={message.message}\n            type={message.type}\n            theme={this.theme}\n            onDismiss={() => this.onDismiss(message.id)}\n          />\n        ))}\n      </div>\n    );\n  }\n}\n"]}